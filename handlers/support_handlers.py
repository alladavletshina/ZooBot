from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import hbold, hlink, hitalic
from urllib.parse import quote

from app.keyboards import contact_button
from app.states import QuizState
from config.config import CONTACT_PHONE, CONTACT_EMAIL
from handlers.quiz_handlers import determine_final_result


async def contact_support(message: types.Message, state: FSMContext) -> None:

    await message.answer(
        "‚ú® <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:</b> ‚ú®",
        reply_markup=contact_button,
        parse_mode="HTML"
    )
    await state.set_state(QuizState.contact_support)


async def handle_contact_choice(callback_query: types.CallbackQuery, state: FSMContext) -> None:

    contact_method = callback_query.data
    final_result = determine_final_result() or "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω"
    user = callback_query.from_user
    username = user.username or "–∞–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    first_name = user.first_name or ""


    user_info = (
        f"\nüë§ {hbold(f'{first_name}') if first_name else ''}"
        f"\nüîπ {hitalic(f'@{username}') if username.startswith('@') else hitalic(username)}"
        f"\nüÜî ID: {user.id}"
        f"\nüèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç: {hbold(final_result)}"
    )

    match contact_method:
        case "send_email":
            email_subject = quote(f"–í–æ–ø—Ä–æ—Å –ø–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ –æ—Ç {first_name or username}")
            await callback_query.message.answer(
                f"üìÆ {hbold('–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞:')}\n"
                f"‚îî {hlink(CONTACT_EMAIL, f'mailto:{CONTACT_EMAIL}?subject={email_subject}')}\n\n"
                f"üìù {hbold('–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ç–µ–º–∞:')}\n"
                f"‚îî ¬´–í–æ–ø—Ä–æ—Å –ø–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ –æ—Ç {first_name or username}¬ª\n"
                f"{user_info}\n\n"
                f"üíå {hitalic('–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤')}",
                parse_mode="HTML",
                disable_web_page_preview=True
            )

        case "make_call":
            await callback_query.message.answer(
                f"üì± {hbold('–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏:')}\n"
                f"‚îî {hlink(CONTACT_PHONE, f'tel:{CONTACT_PHONE}')}\n\n"
                f"üïí {hbold('–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:')}\n"
                f"‚îî –ü–Ω-–ü—Ç: 9:00-18:00\n"
                f"‚îî –°–±-–í—Å: –≤—ã—Ö–æ–¥–Ω–æ–π\n"
                f"{user_info}\n\n"
                f"‚òéÔ∏è {hitalic('–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–≤–æ–Ω–æ–∫')}",
                parse_mode="HTML",
                disable_web_page_preview=True
            )

        case _:
            await callback_query.message.answer(
                "‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç",
                parse_mode="HTML"
            )

    await state.clear()
    await callback_query.answer()