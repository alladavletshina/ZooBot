IMAGES_DIR = "./images/"

ANIMAL_IMAGES = {
    "Альпака": IMAGES_DIR + "alpaka.jpg",
    "Тигр": IMAGES_DIR + "tiger.jpg",
    "Волк": IMAGES_DIR + "wolf.jpg",
    "Ленивец": IMAGES_DIR + "lazy_one.jpg",
    "Белый аист": IMAGES_DIR + "white_aist.jpg",
    "Неопределённое животное": IMAGES_DIR + "unknown.jpg"
}

questions = [
    {
        "text": "Какие места отдыха вам нравятся?",
        "options": ["Природа", "Городские парки", "Экстрим"],
        "points": {"Природа": 1, "Городские парки": 2, "Экстрим": 3}
    },
    {
        "text": "Что для вас важнее всего в отношениях?",
        "options": ["Эмоции", "Комфорт", "Безопасность"],
        "points": {"Эмоции": 1, "Комфорт": 2, "Безопасность": 3}
    },
    {
        "text": "Какой суперсилой вы хотели бы обладать?",
        "options": ["Телепортация", "Чтение мыслей", "Бессмертие"],
        "points": {"Телепортация": 2, "Чтение мыслей": 3, "Бессмертие": 1}
    },
    {
        "text": "Что бы вы выбрали на необитаемом острове?",
        "options": ["Нож", "Книгу", "Гамак"],
        "points": {"Нож": 3, "Книгу": 2, "Гамак": 1}
    },
    {
        "text": "Какой вы видите идеальную субботу?",
        "options": ["Активный отдых", "Творчество", "Ничегонеделание"],
        "points": {"Активный отдых": 3, "Творчество": 2, "Ничегонеделание": 1}
    }
]

score_to_animals = {
    range(5, 8): "Альпака",
    range(8, 11): "Тигр",
    range(11, 14): "Волк",
    range(3, 5): "Ленивец",
    range(14, 16): "Белый аист"
}

animal_descriptions = {
    "Альпака": "Верный друг, преданный и заботливый. Ценит простые радости жизни.",
    "Тигр": "Независимый дух с королевской грацией. Умеет наслаждаться одиночеством.",
    "Волк": "Храбрый лидер стаи. Всегда защищает своих близких и территорию.",
    "Ленивец": "Философ и созерцатель. Живёт в гармонии с собственным ритмом.",
    "Белый аист": "Мистическая личность с силой возрождения. Вдохновляет окружающих.",
    "Неопределённое животное": "Вы - загадка даже для себя самого! Продолжайте исследовать свой внутренний мир."
}

def calculate_total_score(user_answers):
    total_points = sum([questions[i].get("points").get(ans, 0)
                       for i, ans in enumerate(user_answers)
                       if i < len(questions)])
    return total_points