import logging
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command, CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from config import API_TOKEN, BOT_LINK, CONTACT_EMAIL, CONTACT_PHONE, ZOO_WEBSITE
from database import Feedback, SessionLocal
from utils import questions, animal_descriptions, score_to_animals, calculate_total_score

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class QuizState(StatesGroup):
    quiz_in_progress = State()
    leave_feedback = State()
    contact_support = State()

current_question_index = 0
user_score = {}

# –°–ª–æ–≤–∞—Ä—å —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ –ø—É—Ç–µ–π –∫ –∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
ANIMAL_IMAGES = {
    "–°–æ–±–∞–∫–∞": "./images/alpaka.jpg",
    "–¢–∏–≥—Ä": "./images/tiger.jpg",
    "–í–æ–ª–∫": "./images/wolf.jpg",
    "–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ": "./images/unknown.jpg"
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É üî•")],
    [KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚úèÔ∏è")],
    [KeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π üí¨")],
    [KeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å ‚õî")]
], resize_keyboard=True)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
share_button = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚ú® –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–æ–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º", switch_inline_query=f"–ú–æ—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞: {BOT_LINK}")]
])

contact_button = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ", callback_data="send_email")],
    [InlineKeyboardButton(text="–ü–æ–∑–≤–æ–Ω–∏—Ç—å", callback_data="make_call")]
])

opportunity_button = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ö–ª—É–±–µ –¥—Ä—É–∑–µ–π", url=ZOO_WEBSITE)]
])

@dp.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!\n\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)

@dp.message(lambda msg: msg.text == "–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É üî•")
async def fill_quiz(message: types.Message, state: FSMContext):
    global current_question_index
    current_question_index = 0
    await ask_next_question(message.chat.id, state)
    await state.set_state(QuizState.quiz_in_progress)

from aiogram.types.input_file import FSInputFile  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å FSInputFile

async def ask_next_question(chat_id, state: FSMContext):
    global current_question_index
    if current_question_index >= len(questions):
        final_result = determine_final_result()
        result_message = f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–≤–æ—ë –∂–∏–≤–æ—Ç–Ω–æ–µ ‚Äî {final_result}!\n\n{animal_descriptions.get(final_result)}.\n\n"
        result_message += "üêæ –¢—ã –º–æ–∂–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—à–µ–≥–æ –¥—Ä—É–≥–∞, —Å—Ç–∞–≤ —á–ª–µ–Ω–æ–º –ö–ª—É–±–∞ –¥—Ä—É–∑–µ–π –∑–æ–æ–ø–∞—Ä–∫–∞. –ö–∞–∂–¥–∞—è —Ç–≤–æ—è –∫–æ–ø–µ–π–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏—Ä–æ–¥—É –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –Ω–∞—à–µ–π –ø–ª–∞–Ω–µ—Ç—ã.\n\n"
        result_message += "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–∏–º –¥—Ä—É–∑—å—è–º –∏ —Å–¥–µ–ª–∞–π –º–∏—Ä –Ω–µ–º–Ω–æ–≥–æ –¥–æ–±—Ä–µ–µ!"

        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
        image_path = ANIMAL_IMAGES.get(final_result, ANIMAL_IMAGES['–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ'])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é, –∏—Å–ø–æ–ª—å–∑—É—è FSInputFile
        await bot.send_photo(chat_id, FSInputFile(image_path), caption=result_message)

        await state.clear()
        return

    question = questions[current_question_index]
    buttons = [[InlineKeyboardButton(text=opt, callback_data=f"{current_question_index}-{opt}")] for opt in question["options"]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await bot.send_message(chat_id, question["text"], reply_markup=keyboard)

@dp.callback_query(QuizState.quiz_in_progress)
async def process_answer(callback_query: types.CallbackQuery, state: FSMContext):
    global current_question_index
    index, answer = map(str.strip, callback_query.data.split('-'))
    user_score[int(index)] = answer
    current_question_index += 1
    await ask_next_question(callback_query.from_user.id, state)
    await callback_query.answer()

@dp.message(lambda msg: msg.text == "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚úèÔ∏è")
async def enter_feedback(message: types.Message, state: FSMContext):
    cancel_button = InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_feedback")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[cancel_button]])
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:", reply_markup=keyboard)
    await state.set_state(QuizState.leave_feedback)

@dp.callback_query(F.data == "cancel_feedback", QuizState.leave_feedback)
async def cancel_feedback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await state.clear()
    await callback.answer()

@dp.message(QuizState.leave_feedback)
async def process_feedback(message: types.Message, state: FSMContext):
    feedback_text = message.text
    user_id = message.from_user.id
    username = message.from_user.username
    chat_id = message.chat.id

    db_session = SessionLocal()
    try:
        new_feedback = Feedback(
            user_id=user_id,
            username=username,
            chat_id=chat_id,
            feedback_text=feedback_text
        )
        db_session.add(new_feedback)
        db_session.commit()
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞")
    finally:
        db_session.close()
        await state.clear()

@dp.message(lambda msg: msg.text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π üí¨")
async def contact_support(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:", reply_markup=contact_button)
    await state.set_state(QuizState.contact_support)

@dp.callback_query(QuizState.contact_support)
async def handle_contact_choice(callback_query: types.CallbackQuery, state: FSMContext):
    method = callback_query.data
    final_result = determine_final_result()
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or "–∞–Ω–æ–Ω–∏–º"

    match method:
        case "send_email":
            email_subject = f"[–í–∏–∫—Ç–æ—Ä–∏–Ω–∞]: –í–æ–ø—Ä–æ—Å –æ—Ç {username} ({user_id})"
            email_body = (
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
                f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {final_result}\n"
                "\n"
                "–í–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ?"
            )
            await bot.send_message(callback_query.from_user.id, f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–º –Ω–∞ –ø–æ—á—Ç—É: {CONTACT_EMAIL}.\n–¢–µ–º–∞ –ø–∏—Å—å–º–∞: '{email_subject}'")
        case "make_call":
            phone_number = CONTACT_PHONE
            await bot.send_message(callback_query.from_user.id, f"–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º –ø–æ –Ω–æ–º–µ—Ä—É: {phone_number}")

    await state.clear()
    await callback_query.answer()

@dp.message(lambda msg: msg.text == "–ó–∞–∫—Ä—ã—Ç—å ‚õî")
async def close_app(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–æ –≤—Å—Ç—Ä–µ—á–∏! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.", reply_markup=None)

def determine_final_result():
    total_points = calculate_total_score(list(user_score.values()))
    for score_range, animal in score_to_animals.items():
        if total_points in score_range:
            return animal
    return "–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"