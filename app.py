from aiogram import F, types
from aiogram.fsm.context import FSMContext
from bot_instance import dp, bot
from states import QuizState
from handlers.quiz_handlers import fill_quiz, process_answer
from handlers.feedback_handlers import enter_feedback, cancel_feedback, process_feedback
from handlers.support_handlers import contact_support, handle_contact_choice
from handlers import commands

# –í–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
dp.include_router(commands.router)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
dp.message(lambda msg: msg.text == "–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É üî•")(fill_quiz)
dp.callback_query(QuizState.quiz_in_progress)(process_answer)

dp.message(lambda msg: msg.text == "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚úèÔ∏è")(enter_feedback)
dp.callback_query(F.data == "cancel_feedback", QuizState.leave_feedback)(cancel_feedback)
dp.message(QuizState.leave_feedback)(process_feedback)

dp.message(lambda msg: msg.text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π üí¨")(contact_support)
dp.callback_query(QuizState.contact_support)(handle_contact_choice)

@dp.message(lambda msg: msg.text == "–ó–∞–∫—Ä—ã—Ç—å ‚õî")
async def close_app(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–æ –≤—Å—Ç—Ä–µ—á–∏! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.", reply_markup=None)
