import logging
from aiogram.types.input_file import FSInputFile
from aiogram import Bot, Dispatcher, F, types, Router
from aiogram.filters import Command, CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import API_TOKEN, BOT_LINK, CONTACT_EMAIL, CONTACT_PHONE, ZOO_WEBSITE, ADMINS_IDS
from database import Feedback, SessionLocal
from utils import questions, animal_descriptions, score_to_animals, calculate_total_score, ANIMAL_IMAGES

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

async def delete_webhook():
    bot = Bot(token=API_TOKEN)
    await bot.delete_webhook()
    await bot.session.close()

async def check_admin(message: types.Message):
    if message.from_user.id not in ADMINS_IDS:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return False
    return True

class QuizState(StatesGroup):
    quiz_in_progress = State()
    leave_feedback = State()
    contact_support = State()

current_question_index = 0
user_score = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É üî•")],
    [KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚úèÔ∏è")],
    [KeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π üí¨")],
    [KeyboardButton(text="–ö–ª—É–± –¥—Ä—É–∑–µ–π üêæ")],
    [KeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å ‚õî")]
], resize_keyboard=True)

contact_button = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ", callback_data="send_email")],
    [InlineKeyboardButton(text="–ü–æ–∑–≤–æ–Ω–∏—Ç—å", callback_data="make_call")]
])

opportunity_button = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ö–ª—É–±–µ –¥—Ä—É–∑–µ–π", url=ZOO_WEBSITE)]
])

@dp.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "- –ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ —É–∑–Ω–∞—Ç—å —Å–≤–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ\n"
        "- –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ö–ª—É–±—É –¥—Ä—É–∑–µ–π –∑–æ–æ–ø–∞—Ä–∫–∞\n"
        "- –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )

@dp.message(F.text == "–ö–ª—É–± –¥—Ä—É–∑–µ–π üêæ")
async def friends_club_info(message: types.Message):
    await message.answer(
        "üêØ –ö–ª—É–± –¥—Ä—É–∑–µ–π –∑–æ–æ–ø–∞—Ä–∫–∞ ü¶Å\n\n"
        "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö!\n"
        "–í–∞—à–µ —É—á–∞—Å—Ç–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç:\n"
        "- –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–¥–∫–∏–µ –≤–∏–¥—ã\n"
        "- –°–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö\n"
        "- –†–∞–∑–≤–∏–≤–∞—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n\n"
        "–ö–∞–∂–¥—ã–π —á–ª–µ–Ω –∫–ª—É–±–∞ –ø–æ–ª—É—á–∞–µ—Ç:\n"
        "‚úÖ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
        "‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—Å–µ—â–∞—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n"
        "‚úÖ –ò–º–µ–Ω–Ω–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç",
        reply_markup=opportunity_button
    )

@dp.message(lambda msg: msg.text == "–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É üî•")
async def fill_quiz(message: types.Message, state: FSMContext):
    global current_question_index
    current_question_index = 0
    await ask_next_question(message.chat.id, state)
    await state.set_state(QuizState.quiz_in_progress)


async def ask_next_question(chat_id: int, state: FSMContext):
    if current_question_index >= len(questions):
        final_result = determine_final_result()
        await send_quiz_result(chat_id, final_result)
        await state.clear()
        return

    question = questions[current_question_index]
    buttons = [[InlineKeyboardButton(text=opt, callback_data=f"{current_question_index}-{opt}")]
               for opt in question["options"]]
    await bot.send_message(
        chat_id,
        question["text"],
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )


@dp.callback_query(QuizState.quiz_in_progress)
async def process_answer(callback: types.CallbackQuery, state: FSMContext):
    global current_question_index
    index, answer = callback.data.split('-')
    user_score[int(index)] = answer
    current_question_index += 1
    await ask_next_question(callback.from_user.id, state)
    await callback.answer()


# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —à–∞—Ä–∏–Ω–≥
async def create_share_keyboard(result: str):
    builder = InlineKeyboardBuilder()
    share_text = (
        f"–Ø –ø—Ä–æ—à—ë–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ –º–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - {result}! "
        f"–ê –∫–∞–∫–æ–µ —Ç–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ? –ü—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç: {BOT_LINK}"
    )

    builder.row(
        InlineKeyboardButton(
            text="üì¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram",
            url=f"https://t.me/share/url?url={BOT_LINK}&text={share_text}"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üåç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ –¥—Ä—É–≥–∏—Ö —Å–µ—Ç—è—Ö",
            callback_data=f"share_ext_{result}"
        )
    )
    return builder.as_markup()


async def send_quiz_result(chat_id: int, result: str):
    image_path = ANIMAL_IMAGES.get(result, ANIMAL_IMAGES['–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ'])
    caption = (
        f"üéâ <b>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b> {result}!\n\n"
        f"{animal_descriptions[result]}\n\n"
        f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏!\n"
        f"<i>–ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É:</i> {BOT_LINK}"
    )

    await bot.send_photo(
        chat_id,
        photo=FSInputFile(image_path),
        caption=caption,
        reply_markup=await create_share_keyboard(result),
        parse_mode="HTML"
    )


@dp.callback_query(F.data.startswith("share_ext_"))
async def share_external(callback: types.CallbackQuery):
    animal = callback.data.split('_')[2]
    await callback.answer()
    await bot.send_message(
        callback.from_user.id,
        f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n\n"
        f"–ú–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ - {animal}!\n\n"
        f"–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —Å–≤–æ—ë? –ü—Ä–æ–π–¥–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É:\n{BOT_LINK}"
    )


@dp.message(lambda msg: msg.text == "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚úèÔ∏è")
async def enter_feedback(message: types.Message, state: FSMContext):
    cancel_button = InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_feedback")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[cancel_button]])
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:", reply_markup=keyboard)
    await state.set_state(QuizState.leave_feedback)

@dp.callback_query(F.data == "cancel_feedback", QuizState.leave_feedback)
async def cancel_feedback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await state.clear()
    await callback.answer()

@dp.message(QuizState.leave_feedback)
async def process_feedback(message: types.Message, state: FSMContext):
    feedback_text = message.text
    user_id = message.from_user.id
    username = message.from_user.username
    chat_id = message.chat.id

    db_session = SessionLocal()
    try:
        new_feedback = Feedback(
            user_id=user_id,
            username=username,
            chat_id=chat_id,
            feedback_text=feedback_text
        )
        db_session.add(new_feedback)
        db_session.commit()
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞")
    finally:
        db_session.close()
        await state.clear()

@dp.message(lambda msg: msg.text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π üí¨")
async def contact_support(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:", reply_markup=contact_button)
    await state.set_state(QuizState.contact_support)

@dp.callback_query(QuizState.contact_support)
async def handle_contact_choice(callback_query: types.CallbackQuery, state: FSMContext):
    method = callback_query.data
    final_result = determine_final_result()
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or "–∞–Ω–æ–Ω–∏–º"

    match method:
        case "send_email":
            email_subject = f"[–í–∏–∫—Ç–æ—Ä–∏–Ω–∞]: –í–æ–ø—Ä–æ—Å –æ—Ç {username} ({user_id})"
            email_body = (
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
                f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {final_result}\n"
                "\n"
                "–í–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ?"
            )
            await bot.send_message(callback_query.from_user.id, f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–º –Ω–∞ –ø–æ—á—Ç—É: {CONTACT_EMAIL}.\n–¢–µ–º–∞ –ø–∏—Å—å–º–∞: '{email_subject}'")
        case "make_call":
            phone_number = CONTACT_PHONE
            await bot.send_message(callback_query.from_user.id, f"–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º –ø–æ –Ω–æ–º–µ—Ä—É: {phone_number}")

    await state.clear()
    await callback_query.answer()

@dp.message(lambda msg: msg.text == "–ó–∞–∫—Ä—ã—Ç—å ‚õî")
async def close_app(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–æ –≤—Å—Ç—Ä–µ—á–∏! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.", reply_markup=None)

def determine_final_result():
    total_points = calculate_total_score(list(user_score.values()))
    for score_range, animal in score_to_animals.items():
        if total_points in score_range:
            return animal
    return "–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"